import asyncio
from aiogram import Router
from aiogram.filters import CommandStart
from aiogram.types import Message
from bot.keybords.user_kb import main
from aiogram import F
import re
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardRemove
from bot.states import AuthState
import httpx


EMAIL_REGEX = re.compile(
    r"^[a-zA-Z0-9_.+-]+@(?:yandex|gmail|outlook|icloud)\.(?:com|ru|by)$"
)

user = Router()

#catch states of user
# @user.message()
# async def debug_state(message: Message, state: FSMContext):
#     current_state = await state.get_state()
#     await message.answer(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state}")


@user.message(CommandStart())
async def start(message: Message, state: FSMContext):
    await state.set_state(AuthState.entering_country)
    await message.answer('Please, choose country, which visa you would like to get?', reply_markup=main)

@user.message(F.text.in_(["USA", "Poland"]))
async def handle_country_choice(message: Message, state: FSMContext):
    country = message.text
    await message.answer(f"You choose country: {message.text}")
    await state.update_data(country=country)
    await state.set_state(AuthState.entering_email)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:", reply_markup=ReplyKeyboardRemove())

@user.message(AuthState.entering_email)
async def get_email(message: Message, state: FSMContext):
    email = message.text
    if not EMAIL_REGEX.match(email):
        await message.answer(
            "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email.\n–î–æ–ø—É—Å—Ç–∏–º—ã —Ç–æ–ª—å–∫–æ yandex, gmail, outlook, icloud —Å –¥–æ–º–µ–Ω–∞–º–∏ .com, .ru, .by.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
        )
        return
    await state.update_data(email=email)
    await state.set_state(AuthState.entering_password)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")


@user.message(AuthState.entering_password)
async def get_password(message: Message, state: FSMContext):
    password = message.text
    user_data = await state.get_data()
    email = user_data["email"]
    country = user_data["country"].lower()

    try:
        async with httpx.AsyncClient(base_url="http://127.0.0.1:8000") as client:
            # –õ–æ–≥–∏–Ω
            response = await client.post("/auth/login", json={"email": email, "password": password})

            if response.status_code == 200:
                data = response.json()
                msg = data.get("message", "–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥!")
                await message.answer(f"{msg} ‚úÖ\n–í—ã –≤–æ—à–ª–∏ –∫–∞–∫: {data.get('user')}")

                # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–ª–æ—Ç–æ–≤
                slots_response = await client.get(f"/{country}/slots", cookies=response.cookies)
                await message.answer(f"–ü–µ—Ä–µ—Ö–æ–∂—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–ª–æ—Ç–æ–≤!")
                if slots_response.status_code == 200:
                    slots_data = slots_response.json()
                    slots = slots_data.get("slots", [])
                    await message.answer(f"slots: {slots}")

                    if not slots:
                        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ üò¢. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                        return

                    # –í—ã–±–æ—Ä –ø–µ—Ä–≤–æ–≥–æ —Å–ª–æ—Ç–∞
                    first_slot = slots[0]
                    await message.answer(f"first slot: {first_slot}")
                    book_response = await client.post("/select_slot", json={
                        "date": first_slot[0],
                        "time": first_slot[1],
                        "email": email,
                        "country": country
                    }, cookies=response.cookies)

                    if book_response.status_code == 200:
                        await message.answer(f"–°–ª–æ—Ç –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω: {first_slot[0]} {first_slot[1]} üìÖ")
                    else:
                        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–ª–æ—Ç. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —É–∂–µ –∑–∞–Ω—è—Ç.")

                else:
                    await message.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ª–æ—Ç–æ–≤.")

                await state.clear()
            else:
                await message.answer("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ.")
                await state.set_state(AuthState.entering_email)

    except Exception as e:
        print(f"Error: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É.")
        await state.clear()
