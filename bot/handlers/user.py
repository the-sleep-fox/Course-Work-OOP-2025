import asyncio
import re
from aiogram import Router
from aiogram.filters import CommandStart, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, ReplyKeyboardMarkup, ReplyKeyboardRemove
from aiogram.types.keyboard_button import KeyboardButton
import httpx
import logging
from aiogram import F

from bot.states import RegisterStates, AuthState
from server.handler.slots_handler import poll_slots_until_found

user = Router()
logger = logging.getLogger(__name__)

EMAIL_REGEX = re.compile(r"^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$")

main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìÑ –ú–æ–∏ –∑–∞–ø–∏—Å–∏")],
        [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å")],
        [KeyboardButton(text="üåç –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å")],
        [KeyboardButton(text="üö™ –í—ã–π—Ç–∏")]
    ], resize_keyboard=True
)


# –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
@user.message(CommandStart())
async def start(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–æ–π–¥–∏—Ç–µ –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å:",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üîê –í–æ–π—Ç–∏")],
                [KeyboardButton(text="üÜï –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")]
            ],
            resize_keyboard=True
        )
    )

# –ù–∞—á–∞–ª–æ –ª–æ–≥–∏–Ω–∞
@user.message(StateFilter(None), F.text == "üîê –í–æ–π—Ç–∏")
async def login(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ email:", reply_markup=ReplyKeyboardRemove())
    await state.set_state(AuthState.entering_email)

# –ü–æ–ª—É—á–µ–Ω–∏–µ email
@user.message(AuthState.entering_email)
async def get_email(message: Message, state: FSMContext):
    email = message.text.strip()
    logger.info(f"–í–≤–µ–¥–µ–Ω email: {email}")
    if not EMAIL_REGEX.match(email):
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    await state.update_data(email=email)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
    await state.set_state(AuthState.entering_password)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –∏ –ª–æ–≥–∏–Ω
@user.message(AuthState.entering_password)
async def get_password(message: Message, state: FSMContext):
    password = message.text
    user_data = await state.get_data()
    email = user_data["email"]
    logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –ª–æ–≥–∏–Ω–∞: email={email}, Chat ID: {message.chat.id}, User ID: {message.from_user.id}")

    try:
        async with httpx.AsyncClient(base_url="http://127.0.0.1:8000", timeout=httpx.Timeout(30.0)) as client:
            response = await client.post("/auth/login", json={"email": email, "password": password})
            response.raise_for_status()
            session_id = response.cookies.get("session_id")
            if not session_id:
                logger.error("Cookie session_id –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –æ—Ç–≤–µ—Ç–µ")
                await message.answer("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: —Å–µ—Å—Å–∏—è –Ω–µ —Å–æ–∑–¥–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                return
            logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: State={await state.get_state()}, Data={await state.get_data()}")
            await state.update_data(session_id=session_id)
            await state.set_state(AuthState.menu)
            await message.answer("–í—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu)
    except httpx.HTTPStatusError as e:
        error_detail = e.response.json().get("detail", "–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞")
        logger.error(f"HTTP –æ—à–∏–±–∫–∞: {e.response.status_code}, –î–µ—Ç–∞–ª–∏: {error_detail}")
        await message.answer(f"–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: {error_detail}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    except httpx.RequestError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        await message.answer("–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except Exception as e:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏–Ω–µ: {type(e).__name__}: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –í—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞
@user.message(AuthState.menu, F.text == "üö™ –í—ã–π—Ç–∏")
async def logout(message: Message, state: FSMContext):
    user_data = await state.get_data()
    session_id = user_data.get("session_id")
    if not session_id:
        await message.answer("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.")
        await state.clear()
        await message.answer(
            "–í–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å:",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="üîê –í–æ–π—Ç–∏")],
                          [KeyboardButton(text="üÜï –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")]],
                resize_keyboard=True
            )
        )
        return
    cookies = {"session_id": session_id}
    async with httpx.AsyncClient(base_url="http://127.0.0.1:8000", timeout=httpx.Timeout(30.0), cookies=cookies) as client:
        try:
            response = await client.post("/auth/logout")
            response.raise_for_status()
            await state.clear()
            await message.answer(
                "–í—ã—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω. –í–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:",
                reply_markup=ReplyKeyboardMarkup(
                    keyboard=[[KeyboardButton(text="üîê –í–æ–π—Ç–∏")],
                              [KeyboardButton(text="üÜï –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")]],
                    resize_keyboard=True
                )
            )
        except httpx.HTTPStatusError as e:
            error_detail = e.response.json().get("detail", "–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞")
            logger.error(f"HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ: {e.response.status_code}, –î–µ—Ç–∞–ª–∏: {error_detail}")
            await message.answer(f"–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞: {error_detail}")
        except httpx.RequestError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ: {e}")
            await message.answer("–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except Exception as e:
            logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ: {type(e).__name__}: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø–∏—Å–µ–π
@user.message(AuthState.menu, F.text == "üìÑ –ú–æ–∏ –∑–∞–ø–∏—Å–∏")
async def view_bookings(message: Message, state: FSMContext):
    user_data = await state.get_data()
    email = user_data.get("email")
    session_id = user_data.get("session_id")
    if not session_id:
        await message.answer("–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()
        await message.answer(
            "–í–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="üîê –í–æ–π—Ç–∏")],
                          [KeyboardButton(text="üÜï –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")]],
                resize_keyboard=True
            )
        )
        return
    cookies = {"session_id": session_id}
    async with httpx.AsyncClient(base_url="http://127.0.0.1:8000", timeout=httpx.Timeout(30.0), cookies=cookies) as client:
        try:
            response = await client.get(f"/get_bookings?email={email}")
            response.raise_for_status()
            bookings = response.json().get("bookings", [])
            if bookings:
                msg = "–í–∞—à–∏ –∑–∞–ø–∏—Å–∏:\n" + "\n".join([f"{b['country']}: {b['date']} {b['time']}" for b in bookings])
            else:
                msg = "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π."
            await message.answer(msg, reply_markup=main_menu)
        except httpx.HTTPStatusError as e:
            error_detail = e.response.json().get("detail", "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π")
            logger.error(f"HTTP –æ—à–∏–±–∫–∞: {e.response.status_code}, –î–µ—Ç–∞–ª–∏: {error_detail}")
            if e.response.status_code == 401:
                await message.answer("–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞.")
                await state.clear()
            else:
                await message.answer(f"–û—à–∏–±–∫–∞: {error_detail}")
        except httpx.RequestError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            await message.answer("–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except Exception as e:
            logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π: {type(e).__name__}: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–º–µ–Ω—É –∑–∞–ø–∏—Å–∏
@user.message(AuthState.menu, F.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å")
async def ask_cancel_country(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É, –∑–∞–ø–∏—Å—å –≤ –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å:")
    await state.set_state(AuthState.canceling_country)

# –û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏
@user.message(AuthState.canceling_country)
async def cancel_booking(message: Message, state: FSMContext):
    country = message.text.lower()
    user_data = await state.get_data()
    email = user_data.get("email")
    session_id = user_data.get("session_id")
    if not session_id:
        await message.answer("–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()
        await message.answer(
            "–í–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="üîê –í–æ–π—Ç–∏")],
                          [KeyboardButton(text="üÜï –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")]],
                resize_keyboard=True
            )
        )
        return
    cookies = {"session_id": session_id}
    async with httpx.AsyncClient(base_url="http://127.0.0.1:8000", timeout=httpx.Timeout(30.0), cookies=cookies) as client:
        try:
            response = await client.delete("/cancel_booking", params={"email": email, "country": country})
            response.raise_for_status()
            await message.answer("–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=main_menu)
        except httpx.HTTPStatusError as e:
            error_detail = e.response.json().get("detail", "–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏")
            logger.error(f"HTTP –æ—à–∏–±–∫–∞: {e.response.status_code}, –î–µ—Ç–∞–ª–∏: {error_detail}")
            if e.response.status_code == 401:
                await message.answer("–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞.")
                await state.clear()
            else:
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {error_detail}")
        except httpx.RequestError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            await message.answer("–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except Exception as e:
            logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏: {type(e).__name__}: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    await state.set_state(AuthState.menu)

# –ó–∞–ø—Ä–æ—Å –Ω–∞ –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
@user.message(AuthState.menu, F.text == "üåç –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å")
async def ask_country_for_booking(message: Message, state: FSMContext):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É: USA –∏–ª–∏ Poland")
    await state.set_state(AuthState.entering_country)

# –í—ã–±–æ—Ä —Å—Ç—Ä–∞–Ω—ã –∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
@user.message(AuthState.entering_country)
async def handle_country_choice(message: Message, state: FSMContext):
    country = message.text.lower()
    if country not in ["usa", "poland"]:
        await message.answer("–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä–∞–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ: USA –∏–ª–∏ Poland")
        return

    user_data = await state.get_data()
    email = user_data.get("email")
    session_id = user_data.get("session_id")
    if not session_id:
        await message.answer("–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()
        await message.answer(
            "–í–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="üîê –í–æ–π—Ç–∏")]],
                resize_keyboard=True
            )
        )
        return
    cookies = {"session_id": session_id}
    async with httpx.AsyncClient(base_url="http://127.0.0.1:8000", timeout=httpx.Timeout(30.0), cookies=cookies) as client:
        try:
            slots_response = await client.get(f"/{country}/slots")
            slots_response.raise_for_status()
            slots_data = slots_response.json()
            slots = slots_data.get("slots", [])
            if not slots:
                await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ —Å–µ–π—á–∞—Å. –ù–∞—á–∏–Ω–∞—é –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ ‚è≥...")
                chat_id = message.chat.id
                # –ü–µ—Ä–µ–¥–∞–µ–º session_id –≤–º–µ—Å—Ç–æ cookies
                asyncio.create_task(
                    poll_slots_until_found(
                        email=email,
                        country=country,
                        chat_id=chat_id,
                        session_id=session_id  # –ò–∑–º–µ–Ω–µ–Ω–æ
                    )
                )
                await state.set_state(AuthState.menu)
                return

            first_slot = slots[0]
            book_response = await client.post("/select_slot", json={
                "date": first_slot["date"],
                "time": first_slot["time"],
                "email": email,
                "country": country
            })
            book_response.raise_for_status()
            await message.answer(
                f"–°–ª–æ—Ç –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω: {first_slot['date']} {first_slot['time']} üìÖ",
                reply_markup=main_menu
            )
        except httpx.HTTPStatusError as e:
            error_detail = e.response.json().get("detail", "–û—à–∏–±–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
            logger.error(f"HTTP –æ—à–∏–±–∫–∞: {e.response.status_code}, –î–µ—Ç–∞–ª–∏: {error_detail}")
            if e.response.status_code == 401:
                await message.answer("–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞.")
                await state.clear()
            else:
                await message.answer(f"–û—à–∏–±–∫–∞: {error_detail}")
        except httpx.RequestError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            await message.answer("–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except Exception as e:
            logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏: {type(e).__name__}: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    await state.set_state(AuthState.menu)

# –ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
@user.message(StateFilter(None), F.text == "üÜï –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")
async def start_registration(message: Message, state: FSMContext):
    await state.set_state(RegisterStates.waiting_for_email)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:", reply_markup=ReplyKeyboardRemove())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ email –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
@user.message(RegisterStates.waiting_for_email)
async def process_email(message: Message, state: FSMContext):
    email = message.text.strip()
    if not EMAIL_REGEX.match(email):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    await state.update_data(email=email)
    await state.set_state(RegisterStates.waiting_for_passport)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, AB1234567):")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Å–ø–æ—Ä—Ç–∞
@user.message(RegisterStates.waiting_for_passport)
async def process_passport(message: Message, state: FSMContext):
    passport_id = message.text.strip().upper()
    if not re.match(r"^[A-Z]{2}\d{7}$", passport_id):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ –ø–∞—Å–ø–æ—Ä—Ç–∞. –û–∂–∏–¥–∞–µ—Ç—Å—è: AB1234567. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    await state.update_data(passport_id=passport_id)
    await state.set_state(RegisterStates.waiting_for_password)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å (–º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤):")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä–æ–ª—è
@user.message(RegisterStates.waiting_for_password)
async def process_password(message: Message, state: FSMContext):
    password = message.text.strip()
    if len(password) < 8:
        await message.answer("–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    await state.update_data(temp_password=password)
    await state.set_state(RegisterStates.waiting_for_password_confirm)
    await message.answer("–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:")

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è
@user.message(RegisterStates.waiting_for_password_confirm)
async def confirm_password(message: Message, state: FSMContext):
    confirm_password = message.text.strip()
    user_data = await state.get_data()
    original_password = user_data.get("temp_password")
    if confirm_password != original_password:
        await message.answer("–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç. –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∑–∞–Ω–æ–≤–æ:")
        await state.set_state(RegisterStates.waiting_for_password)
        return

    email = user_data["email"]
    passport_id = user_data["passport_id"]
    async with httpx.AsyncClient(base_url="http://127.0.0.1:8000", timeout=httpx.Timeout(30.0)) as client:
        try:
            response = await client.post("/auth/register", json={
                "email": email,
                "passport_id": passport_id,
                "password": original_password
            })
            response.raise_for_status()
            await message.answer(
                "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏.",
                reply_markup=ReplyKeyboardMarkup(
                    keyboard=[[KeyboardButton(text="üîê –í–æ–π—Ç–∏")],
                              [KeyboardButton(text="üÜï –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")]],
                    resize_keyboard=True
                )
            )
            await state.clear()
        except httpx.HTTPStatusError as e:
            error_detail = e.response.json().get("detail", "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
            logger.error(f"HTTP –æ—à–∏–±–∫–∞: {e.response.status_code}, –î–µ—Ç–∞–ª–∏: {error_detail}")
            if "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º" in error_detail:
                await message.answer(
                    f"–û—à–∏–±–∫–∞: {error_detail}. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ:",
                    reply_markup=ReplyKeyboardMarkup(
                        keyboard=[
                            [KeyboardButton(text="‚¨Ö –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ")]
                        ],
                        resize_keyboard=True
                    )
                )
                await state.set_state(RegisterStates.waiting_for_retry)
            else:
                await message.answer(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {error_detail}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=main_menu)
                await state.clear()
        except httpx.RequestError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            await message.answer("–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=main_menu)
            await state.clear()
        except Exception as e:
            logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {type(e).__name__}: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=main_menu)
            await state.clear()

@user.message(StateFilter(None), F.text)
async def handle_unknown_command(message: Message, state: FSMContext):
    await message.answer(
        "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu
    )

@user.message(RegisterStates.waiting_for_retry, F.text == "‚¨Ö –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ")
async def restart_registration(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:", reply_markup=ReplyKeyboardRemove())
    await state.set_state(RegisterStates.waiting_for_email)
