import asyncio
from aiogram import Router
from aiogram.filters import CommandStart
from aiogram.types import Message, ReplyKeyboardRemove, KeyboardButton, ReplyKeyboardMarkup
from aiogram import F
import re
from aiogram.fsm.context import FSMContext
from bot.states import AuthState
import httpx

from server.handler.slots_handler import poll_slots_until_found
from ..keybords.user_kb import main
EMAIL_REGEX = re.compile(
    r"^[a-zA-Z0-9_.+-]+@(?:yandex|gmail|outlook|icloud)\.(?:com|ru|by)$"
)

user = Router()

main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìÑ –ú–æ–∏ –∑–∞–ø–∏—Å–∏")],
        [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å")],
        [KeyboardButton(text="üåç –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å")]
    ], resize_keyboard=True
)

@user.message(CommandStart())
async def start(message: Message, state: FSMContext):
    # chat_id = message.chat.id
    # await message.answer(f"–í–∞—à chat_id: {chat_id}")
    await state.clear()
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="\U0001F510 –í–æ–π—Ç–∏")],
            [KeyboardButton(text="\U0001F195 –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")],
        ], resize_keyboard=True
    ))

@user.message(F.text == "üîê –í–æ–π—Ç–∏")
async def login_start(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:", reply_markup=ReplyKeyboardRemove())
    await state.set_state(AuthState.entering_email)

@user.message(AuthState.entering_email)
async def get_email(message: Message, state: FSMContext):
    email = message.text
    if not EMAIL_REGEX.match(email):
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    await state.update_data(email=email)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
    await state.set_state(AuthState.entering_password)

@user.message(AuthState.entering_password)
async def get_password(message: Message, state: FSMContext):
    password = message.text
    user_data = await state.get_data()
    email = user_data["email"]

    try:
        async with httpx.AsyncClient(base_url="http://127.0.0.1:8000") as client:
            response = await client.post("/auth/login", json={"email": email, "password": password})
            if response.status_code == 200:
                data = response.json()
                await message.answer(f"–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ ‚úÖ\n–í—ã –≤–æ—à–ª–∏ –∫–∞–∫: {data.get('user')}", reply_markup=main_menu)
                await state.set_state(AuthState.menu)
            else:
                await message.answer("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ.")
                await state.set_state(AuthState.entering_email)
    except Exception as e:
        print(f"Error: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É.")
        await state.clear()

@user.message(AuthState.menu, F.text == "üìÑ –ú–æ–∏ –∑–∞–ø–∏—Å–∏")
async def view_bookings(message: Message, state: FSMContext):
    user_data = await state.get_data()
    email = user_data.get("email")
    async with httpx.AsyncClient(base_url="http://127.0.0.1:8000") as client:
        response = await client.get(f"/get_bookings?email={email}")
        if response.status_code == 200:
            bookings = response.json().get("bookings", [])
            if bookings:
                msg = "–í–∞—à–∏ –∑–∞–ø–∏—Å–∏:\n" + "\n".join([f"{b['country']}: {b['date']} {b['time']}" for b in bookings])
            else:
                msg = "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π."
            await message.answer(msg)
        else:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–ø–∏—Å–∏.")

@user.message(AuthState.menu, F.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å")
async def ask_cancel_country(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É, –∑–∞–ø–∏—Å—å –≤ –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å:")
    await state.set_state(AuthState.canceling_country)

@user.message(AuthState.canceling_country)
async def cancel_booking(message: Message, state: FSMContext):
    country = message.text.lower()
    user_data = await state.get_data()
    email = user_data.get("email")
    async with httpx.AsyncClient(base_url="http://127.0.0.1:8000") as client:
        response = await client.delete(
            "/cancel_booking", params={"email": email, "country": country}
        )
        if response.status_code == 200:
            await message.answer("–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=main_menu)
        else:
            try:
                error_data = response.json()
                detail = error_data.get("detail", "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.")
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {detail}")
            except Exception:
                await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞.")
    await state.set_state(AuthState.menu)

@user.message(AuthState.menu, F.text == "üåç –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å")
async def ask_country_for_booking(message: Message, state: FSMContext):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É: USA –∏–ª–∏ Poland")
    await state.set_state(AuthState.entering_country)

@user.message(AuthState.entering_country)
async def handle_country_choice(message: Message, state: FSMContext):
    country = message.text.lower()
    if country not in ["usa", "poland"]:
        await message.answer("–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä–∞–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ: USA –∏–ª–∏ Poland")
        return

    user_data = await state.get_data()
    email = user_data["email"]


    async with httpx.AsyncClient(base_url="http://127.0.0.1:8000") as client:
        slots_response = await client.get(f"/{country}/slots")
        if slots_response.status_code == 200:
            slots_data = slots_response.json()
            slots = slots_data.get("slots", [])
            if not slots:
                await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ —Å–µ–π—á–∞—Å. –ù–∞—á–∏–Ω–∞—é –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ ‚è≥...")
                chat_id = message.chat.id
                asyncio.create_task(
                    poll_slots_until_found(email=email, country=country,chat_id=chat_id,
                                           cookies=slots_response.cookies)
                )
                await state.clear()
                return

            first_slot = slots[0]
            book_response = await client.post("/select_slot", json={
                "date": first_slot[0],
                "time": first_slot[1],
                "email": email,
                "country": country
            })
            if book_response.status_code == 200:
                await message.answer(f"–°–ª–æ—Ç –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω: {first_slot[0]} {first_slot[1]} üìÖ", reply_markup=main_menu)
            else:
                await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–ª–æ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        else:
            await message.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–æ—Ç–æ–≤.")
    await state.set_state(AuthState.menu)
