from aiogram import BaseMiddleware
from aiogram.types import Message, TelegramObject
from typing import Callable, Dict, Any, Awaitable

class LoggingMiddleware(BaseMiddleware):
    async def __call__(
        self,
        handler: Callable[[TelegramObject, Dict[str, Any]], Awaitable[Any]],
        event: TelegramObject,
        data: Dict[str, Any],
    ) -> Any:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–±—ã—Ç–∏–µ ‚Äî —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–µ callback, –Ω–µ inline-–∑–∞–ø—Ä–æ—Å –∏ —Ç. –¥.)
        if not isinstance(event, Message):
            return await handler(event, data)  # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–∞–ª—å—à–µ, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ Message

        print(f"ü™µ –Æ–∑–µ—Ä {event.from_user.id} –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ: {event.text}")
        return await handler(event, data)